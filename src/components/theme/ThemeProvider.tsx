import * as React from 'react';\n\ntype Theme = 'light' | 'dark' | 'system';\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\ninterface ThemeContextValue {\n  theme: Theme;\n  setTheme: (t: Theme) => void;\n}\n\nconst ThemeContext = React.createContext<ThemeContextValue | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'app-theme',\n}) => {\n  const [theme, setThemeState] = React.useState<Theme>(defaultTheme);\n\n  React.useEffect(() => {\n    const stored = localStorage.getItem(storageKey) as Theme | null;\n    if (stored) {\n      setThemeState(stored);\n      applyTheme(stored);\n    } else {\n      applyTheme(defaultTheme);\n    }\n  }, [defaultTheme, storageKey]);\n\n  const applyTheme = (t: Theme) => {\n    const root = document.documentElement;\n    const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    root.classList.remove('light', 'dark');\n    if (t === 'system') {\n      root.classList.add(systemDark ? 'dark' : 'light');\n    } else {\n      root.classList.add(t);\n    }\n  };\n\n  const setTheme = (t: Theme) => {\n    localStorage.setItem(storageKey, t);\n    setThemeState(t);\n    applyTheme(t);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport function useTheme() {\n  const ctx = React.useContext(ThemeContext);\n  if (!ctx) throw new Error('useTheme debe usarse dentro de ThemeProvider');\n  return ctx;\n}\n