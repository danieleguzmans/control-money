import { createContext, useContext, useCallback } from 'react';\nimport type { AuthContextValue } from '@/types';\nimport { useAuth } from '@/hooks/useAuth';\nimport { supabase } from '@/lib/supabaseClient';\n\nconst AuthContext = createContext<AuthContextValue | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user, profile, loading } = useAuth();\n\n  const signOut = useCallback(async () => {\n    await supabase.auth.signOut();\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        profile,\n        loading,\n        signOut,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport function useAuthContext(): AuthContextValue {\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error('useAuthContext debe usarse dentro de AuthProvider');\n  return ctx;\n}\n