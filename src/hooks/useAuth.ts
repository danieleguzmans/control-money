import { useEffect, useState } from 'react';\nimport { supabase } from '@/lib/supabaseClient';\nimport type { AuthUserMinimal, Profile } from '@/types';\n\ninterface UseAuthResult {\n  user: AuthUserMinimal | null;\n  profile: Profile | null;\n  loading: boolean;\n}\n\nexport function useAuth(): UseAuthResult {\n  const [user, setUser] = useState<AuthUserMinimal | null>(null);\n  const [profile, setProfile] = useState<Profile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let mounted = true;\n\n    async function load() {\n      setLoading(true);\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (!mounted) return;\n\n      if (session?.user) {\n        const u: AuthUserMinimal = {\n          id: session.user.id,\n          email: session.user.email ?? undefined,\n        };\n        setUser(u);\n        await fetchProfile(u.id);\n      } else {\n        setUser(null);\n        setProfile(null);\n      }\n      setLoading(false);\n    }\n\n    load();\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      if (!mounted) return;\n      if (session?.user) {\n        const u: AuthUserMinimal = {\n          id: session.user.id,\n          email: session.user.email ?? undefined,\n        };\n        setUser(u);\n        fetchProfile(u.id);\n      } else {\n        setUser(null);\n        setProfile(null);\n      }\n    });\n\n    return () => {\n      mounted = false;\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  async function fetchProfile(userId: string) {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', userId)\n      .single();\n    if (!error) {\n      setProfile(data as Profile);\n    }\n  }\n\n  return { user, profile, loading };\n}\n